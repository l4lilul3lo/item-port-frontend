{"version":3,"file":"static/js/796.169f00df.chunk.js","mappings":"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","sources":["routes/register/Register.js","hooks/useRegistration.js"],"sourcesContent":["import { useState } from \"react\";\nimport validator from \"validator\";\nimport PasswordStrengthBar from \"react-password-strength-bar\";\nimport { useRegistration } from \"../../hooks/useRegistration\";\nimport logo from \"../../images/logo.png\";\nimport \"./register.css\";\n\nconst Register = () => {\n  const registration = useRegistration();\n\n  const [inputs, setInputs] = useState({\n    username: {\n      value: \"\",\n      isValid: true,\n      message: \"\",\n    },\n    email: {\n      value: \"\",\n      isValid: true,\n      message: \"\",\n    },\n    password: {\n      value: \"\",\n      isValid: true,\n      message: \"\",\n    },\n    password2: {\n      value: \"\",\n      isValid: true,\n      message: \"\",\n    },\n  });\n\n  const invalidate = (inputName, message) => {\n    console.log(inputs[\"username\"].value);\n    setInputs({\n      ...inputs,\n      [inputName]: {\n        value: inputs[inputName].value,\n        isValid: false,\n        message: message,\n      },\n    });\n  };\n\n  const validate = {\n    username: () => validateUserName(),\n    email: () => validateEmail(),\n    password: () => validatePassword(),\n    password2: () => validatePassword2(),\n  };\n\n  const validateUserName = async () => {\n    const username = inputs.username.value;\n    const isValid = inputs.username.isValid;\n    const inputName = \"username\";\n\n    if (username.length < 3 || username.length > 15) {\n      const message = \"Username must be between 3 and 15 characters\";\n      invalidate(inputName, message);\n      return;\n    }\n\n    if (!username[0].match(/[a-z]/i)) {\n      const message = \"Username must start with a letter\";\n      invalidate(inputName, message);\n      return;\n    }\n\n    if (username.match(/[^a-zA-Z0-9_]/)) {\n      const message =\n        \"Username can only contain letters, numbers, and underscores\";\n      invalidate(inputName, message);\n      return;\n    }\n\n    if (username && isValid) {\n      const message = await registration.checkUserNameExists(username);\n      if (message !== \"Available\") {\n        invalidate(inputName, message);\n      }\n    }\n  };\n\n  const validateEmail = async () => {\n    const email = inputs.email.value;\n    const isValid = inputs.email.isValid;\n    const inputName = \"email\";\n\n    if (!validator.isEmail(email)) {\n      const message = \"Please enter a valid email address\";\n      invalidate(inputName, message);\n      return;\n    }\n\n    if (email && isValid) {\n      const message = await registration.checkEmailExists(email);\n      if (message !== \"Available\") {\n        invalidate(inputName, message);\n      }\n    }\n  };\n  // // lets think state\n\n  const validatePassword = () => {\n    const password = inputs.password.value;\n    console.log(password);\n    if (password.length < 6) {\n      setInputs({\n        ...inputs,\n        password: {\n          isValid: false,\n          message: \"Password must be at least 6 characters in length\",\n          value: password,\n        },\n      });\n    }\n  };\n\n  const validatePassword2 = () => {\n    const password = inputs.password.value;\n    const password2 = inputs.password2.value;\n    console.log(password);\n    console.log(password2);\n    if (password !== password2) {\n      setInputs({\n        ...inputs,\n        password2: {\n          isValid: false,\n          message: \"Passwords do not match\",\n        },\n      });\n    }\n  };\n\n  const isAllValid = () => {\n    for (let key in inputs) {\n      let { value, isValid } = inputs[key];\n\n      if (!value || !isValid) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  const onChange = (e) => {\n    setInputs({\n      ...inputs,\n      [e.target.name]: { value: e.target.value, isValid: true, message: \"\" },\n    });\n  };\n\n  // When the user navigates away from input, check for validation.\n  const handleBlur = (e) => {\n    if (e.target.value) {\n      validate[e.target.name]();\n    }\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (!isAllValid()) {\n      return;\n    }\n    const username = inputs.username.value;\n    const email = inputs.email.value;\n    const password = inputs.password.value;\n    const body = { username, email, password };\n\n    try {\n      registration.register(username, email, password);\n    } catch (error) {}\n  };\n\n  return (\n    <div id=\"register-container\">\n      <img src={logo} />\n      <form id=\"register-form\" onSubmit={handleSubmit} autoComplete=\"off\">\n        <div className=\"input-container\">\n          <input\n            type=\"text\"\n            placeholder=\"Username\"\n            name=\"username\"\n            className={\n              inputs.username.isValid ? \"input valid\" : \"input invalid\"\n            }\n            onChange={(e) => onChange(e)}\n            onBlur={(e) => handleBlur(e)}\n          ></input>\n        </div>\n        <div className=\"message\">{inputs.username.message}</div>\n        <div className=\"input-container\">\n          <input\n            type=\"email\"\n            placeholder=\"Email\"\n            name=\"email\"\n            className={inputs.email.isValid ? \"input valid\" : \"input invalid\"}\n            onChange={(e) => onChange(e)}\n            onBlur={(e) => handleBlur(e)}\n          ></input>\n          <div className=\"message\">{inputs.email.message}</div>\n        </div>\n\n        <div className=\"input-container\">\n          <input\n            type=\"password\"\n            placeholder=\"Password\"\n            name=\"password\"\n            className={\n              inputs.password.isValid ? \"input valid\" : \"input invalid\"\n            }\n            onChange={(e) => onChange(e)}\n            onBlur={(e) => handleBlur(e)}\n          ></input>\n\n          <div className=\"message\">{inputs.password.message}</div>\n\n          <PasswordStrengthBar\n            scoreWordStyle={{ fontSize: \"17px\" }}\n            barColors={[\"#999999\", \"#ef4836\", \"#f6b44d\", \"#2b90ef\", \"#25c281\"]}\n            minLength={6}\n            password={inputs.password.value}\n          />\n        </div>\n\n        <div className=\"input-container\">\n          <input\n            type=\"password\"\n            placeholder=\"Confirm Password\"\n            name=\"password2\"\n            className={\n              inputs.password2.isValid ? \"input valid\" : \"input invalid\"\n            }\n            onChange={(e) => onChange(e)}\n            onBlur={(e) => handleBlur(e)}\n          ></input>\n          <div className=\"message\">{inputs.password2.message}</div>\n        </div>\n\n        <button type=\"submit\" id=\"registerbtn\">\n          Register\n        </button>\n      </form>\n    </div>\n  );\n};\n\n// if input passes validation, begin delayed database queries.\n\n// focusing on react-redux and\n\nexport default Register;\n","import { useAxiosWrapper } from \"./useAxiosWrapper\";\nimport { useDispatch } from \"react-redux\";\nimport { storeMessage } from \"../features/messageSlice\";\nimport { useNavigate } from \"react-router-dom\";\nimport { toast } from \"react-toastify\";\nconst useRegistration = () => {\n  const dispatch = useDispatch();\n  const navigate = useNavigate();\n  const axiosWrapper = useAxiosWrapper();\n  async function register(username, email, password) {\n    const response = await axiosWrapper.post(\"/register\", {\n      username,\n      email,\n      password,\n    });\n\n    if (response.status === 201) {\n      navigate(\"/login\");\n      toast.success(\"registration success\");\n    }\n  }\n  async function checkUserNameExists(username) {\n    const response = await axiosWrapper.post(\"/checkUsernameExists\", {\n      username,\n    });\n\n    return await response.data.message;\n  }\n\n  async function checkEmailExists(email) {\n    const response = await axiosWrapper.post(\"/checkEmailExists\", { email });\n    return await response.data.message;\n  }\n\n  return {\n    checkUserNameExists,\n    checkEmailExists,\n    register,\n  };\n};\n\nexport { useRegistration };\n"],"names":["registration","useDispatch","navigate","useNavigate","axiosWrapper","useAxiosWrapper","username","email","password","post","status","toast","response","data","message","checkUserNameExists","checkEmailExists","register","useRegistration","useState","value","isValid","password2","inputs","setInputs","invalidate","inputName","console","log","validate","validateUserName","validateEmail","validatePassword","validatePassword2","length","match","validator","isAllValid","key","onChange","e","target","name","handleBlur","handleSubmit","preventDefault","error","id","src","logo","onSubmit","autoComplete","className","type","placeholder","onBlur","scoreWordStyle","fontSize","barColors","minLength"],"sourceRoot":""}